import Head from 'next/head'
import Image from 'next/image'
import styles from './index.module.scss'
import {getList} from "@/api";

// 引入 长列表优化组件
import 'react-virtualized/styles.css';

import {Grid, WindowScroller} from 'react-virtualized';
import React, {useState} from "react";
import Link from "next/link";

// TODO 生产要使用React17
export default function Index(props: any) {
  const [data, setData] = useState<any>([])
  for (let i = 0; i < props.data.list.length; i += 5) {
    data.push(props.data.list.slice(i, i + 5))
  }
  console.log(data)

  const cellRenderer = ({columnIndex, key, rowIndex, style}: any) => {
    const item = data[rowIndex][columnIndex]

    return (
      <Link href={`/detail/${item.fa_img_id}`} key={key} style={style} target="_blank">
        <div key={item.detail_url_alias} className={styles.list_item}>
          <Image width={241} height={161} src={item.thuimg324} alt={item.res_name}/>
          <p className={styles.list_info}>
            <span>{item.res_name}</span>
            <span>{item.res_price}下载币</span>
          </p>
        </div>
      </Link>
    );
  }

  let first = false
  const onScroll = (props: any) => {
    const {scrollHeight, clientHeight, scrollTop} = props
    if (scrollTop + clientHeight > scrollHeight && !first) {
      first = true
      setData((preList: any) => {
        first = false
        return [...preList, ...preList]
      })
      // getList({
      //   page: 2
      // }).then(res => {
      //   first = false
      // })
    }

  }

  return (
    <>
      <Head>
        <title>3D66</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <header className={styles.header}>
        <Image src="/imgs/header.png" alt="头部" fill></Image>
      </header>
      <main className={styles.main}>
        <div className={styles.list_con}>
          {
            data.length &&
            <WindowScroller>
              {({height, isScrolling, onChildScroll, scrollTop}) => (
                <Grid
                  autoHeight
                  isScrolling={isScrolling}
                  onScroll={(props: any) => {
                    onChildScroll(props)
                    onScroll(props)
                  }}
                  scrollTop={scrollTop}
                  cellRenderer={cellRenderer}
                  columnCount={data[0].length}
                  columnWidth={240}
                  height={1000}
                  rowCount={data.length}
                  rowHeight={220}
                  width={1200}>
                </Grid>
              )}
            </WindowScroller>
          }
        </div>
      </main>
    </>
  )
}

export const getServerSideProps = async (ctx: any) => {
  const result = await getList({
    page: 1,
  })

  return {
    props: {
      ...result
    }
  }
}
